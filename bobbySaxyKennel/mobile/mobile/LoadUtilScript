function isAlphabetNumeric(Data){
    var iCount,iDataLen;
    var Compare = " ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,";
    var cData;
    
    if (Data.length > 0) {
        for (var iCount=0; iCount < Data.length; iCount++)  {
            cData = Data.charAt(iCount);
            if (Compare.indexOf(cData) < 0) {

                alert(FormatResourceString(GetResourceObject("WebOrder.Util.NonAlphaNumericMessage"), cData));
                return false;
            }
        }
     }
     return true;
}

function getCookie(c_name) {
    if (document.cookie.length > 0) {
        c_start = document.cookie.indexOf(c_name + "=");
        if (c_start != -1) {
            c_start = c_start + c_name.length + 1;
            c_end = document.cookie.indexOf(";", c_start);
            if (c_end == -1) c_end = document.cookie.length;
            return unescape(document.cookie.substring(c_start, c_end));
        }
    }
    return "";
}

function deletecookie(name) {
    document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT;';
}

//
// Append a cookie name/value pair to the collection. Note that this doesn't
// replace an existing value for a pre-existing cookie name.
//
function setSessionCookie(c_name, value) 
{
    document.cookie = c_name + "=" + escape(value);
}

//
// GENERIC FAILED WEB SERVICE CALLBACK
//
function GetWebServiceFailed(result, userContext) 
{
    if ((result.message != null) && (result.message== "SessionTimeout"))
    {
        SessionExpired();
    }

    if (window.location.pathname.toLowerCase().indexOf("error.aspx") < 0)
    {
        window.location = "Error.aspx?ErrorCode=1&Details=GetWebServiceFailed-" + result.message;
    }
/* Debugging functionality
    var msg = String.format("statusCode={0}\r\nexceptionType={1}\r\ntimedOut={2}\r\nmessage={3}\r\nstackTrace={4}",
    result.get_statusCode(), result.get_exceptionType(), result.get_timedOut(), result.get_message(), result.get_stackTrace());
    var userContext = "";
    alert(userContext + " Failed!!! " + msg);
*/
}

function getEventTarget(event)
{
    return event.target || event.srcElement;
}

function FailIfEnterKey(e)
{
    var key;
    if (window.event)
        key = window.event.keyCode; //IE
    else
        key = e.which; //firefox

    return (key != 13);
}

function CurrencyFormattedSuppressZero(amount) {
    var result = CurrencyFormatted(amount);
    return (result == CurrencyFormatted(0.00)) ? "" : result;
}

function CurrencyFormatted(amount) {

    amount = ConvertAmountToDecimalPeriodFormat(amount);

    var i = parseFloat(amount);
    if (isNaN(i)) { i = 0.00; }
    var minus = '';
    if (i < 0) { minus = '-'; }
    i = Math.abs(i);
    i = parseInt((i + .005) * 100);
    i = i / 100;
    s = new String(i);
    if (s.indexOf('.') < 0) { s += '.00'; }
    if (s.indexOf('.') == (s.length - 2)) { s += '0'; }
    s = minus + s;

    s = ConvertToCurrentCultureCurrencyFormat(s);

    return FormatCurrencyPosition(s);
}

//Expected to get the same amount in the following format: xxxxxx.yyy
//There should be no special characters except one decimal.
function ConvertAmountToDecimalPeriodFormat(amount) {
    var testUSNumberFormat = Number(amount).toLocaleString('en-US');//force to use decimalSeparator
    if (isNaN(testUSNumberFormat) || "NaN" == testUSNumberFormat) {//when amount cannot be converted into US format, it returns a string "NaN"
        //Replace comma with periodo as decimal separtor
        amount = amount.toString().replace(/,/g, '.');
    } else {
        amount = testUSNumberFormat.replace(/,/g, '');//when number is big, remove commas
    }
    return amount;
}

function ConvertDecimalValueToUSFormat(dValue) {
    if (typeof window.GetCultureCode == 'function') {
        var numberDecimalSeparator = window.GetCultureCurrencyDecimalSeparator();
        if (numberDecimalSeparator !== '.') {
            dValue = dValue.replace(numberDecimalSeparator, ".");
        }
    }
    return dValue;
}

function ConvertToCurrentCultureCurrencyFormat(amount) {
    if (typeof window.GetCultureCode == 'function') {
        var cultureCode = window.GetCultureCode();

        //Test currency to find out if the decimal separator is a comma
        var testCommaInsteadPeriodNumber = new String(parseFloat("1.25").toLocaleString(cultureCode));

        //Default decimal separator
        var decimalSeparator = '.';

        if (testCommaInsteadPeriodNumber.substring(1, 2) === ",") {
            decimalSeparator = window.GetCultureCurrencyDecimalSeparator();
            //Format amount to the current culture with comma decimal separator
            amount = amount.toString().replace(".", decimalSeparator);
        }

        //Add zeros to have two decimal after parsing
        if (amount.indexOf(decimalSeparator) < 0) {amount += decimalSeparator + '00';}
        if (amount.indexOf(decimalSeparator) === (amount.length - 2)) {amount += '0';}
    }
    return amount;
}

function FormatCurrencyPosition(amount) {
    var isCurrSymbolLeft = /true/i.test(IsCurrencyPositionLeft());
    var amt = (isCurrSymbolLeft) ? CurrencySymbol + amount.toString() : amount.toString() + CurrencySymbol;
    return amt;
}

function IsEmpty(myVar) {  // todo: improve to use trim()
    if ((myVar == "") || (myVar == null)) {
        return true;
    } else {
        return false;
    }
}

function SetHTML(id, HTML) {
    var obj = $get(id);
    if (obj) obj.innerHTML = HTML;
}

function IsNumeric(strString)
//  check for valid numeric strings	
{
    var strValidChars = "0123456789.-";
    var strChar;
    var blnResult = true;

    if (strString.length == 0) return false;

    //  test strString consists of valid characters listed above
    for (i = 0; i < strString.length && blnResult == true; i++) {
        strChar = strString.charAt(i);
        if (strValidChars.indexOf(strChar) == -1) {
            blnResult = false;
        }
    }
    return blnResult;
}

function isEmpty(str) {
    return (!str || 0 === str.length);
}

function isBlank(str) {
    return (!str || /^\s*$/.test(str));
}

function IsValidName(name) {
    return !isBlank(name) && !isEmpty(name) && name.indexOf("'") === -1;
}

//from ResourceStrings.resx same as login Email validation 
function IsValidEmail(value) {
    return /^([0-9a-zA-Z]+[-._+&amp;amp;])*[0-9a-zA-Z]+@([-0-9a-zA-Z]+[.])+[a-zA-Z]{2,6}$/i.test(value);
}

function GetClientGMTOffset()
{
    return (new Date().getTimezoneOffset() / 60);
}

function TranslateServerTime(dt)
{
    var s = GetServerGMTOffset();
    var c = GetClientGMTOffset();
    var translated = new Date()
    var offset = (c - s) * 3600*1000;
    translated.setTime(dt.getTime() + offset);
    return translated;
}

function GetTime(dt)
{
    var h = dt.getHours();
    var m = dt.getMinutes();
    return h + m / 60.0;
}

function FormatTime(fTime) {
    var h = Math.floor(fTime);
    var m = Math.round((fTime - h) * 60);
    //Rounding issues like 11.999999966
    //will cause minutes to round to 60
    if (m == 60) {
        h += 1;
        m = 0;
    }
    var a = (h < 12) ? " AM" : " PM";
    if (h > 12) h = h - 12;
    if (h == 0) h = "12";
    if (m < 10) m = "0" + m;
    return h + ":" + m + a;
}

function FormatDate(dt) {
    if (dt == null) 
        return "";

    return GetShortDayStringForDayOfWeek(dt.getDay()) + " " +
           GetShortMonthString(dt.getMonth()) + " " +
           dt.getDate();
}

function SetTime(timeString, dateObject, hoursToDeduct, minsToDeduct) {
  var arrTimeList = timeString.split(" ");
  var arrHoursVsMinutes = arrTimeList[0].split(":");

  var intHours = parseInt(arrHoursVsMinutes[0]);
  var intMinutes = parseInt(arrHoursVsMinutes[1]);

  if (arrTimeList[1] === "PM") {

    if (arrHoursVsMinutes[0] !== "12") {
      intHours += 12;
    }
  }
  if (arrTimeList[1] === "AM") {

    if (arrHoursVsMinutes[0] === "12") {
      intHours = 0;
    }
  }

  dateObject.setHours(intHours - hoursToDeduct);
  dateObject.setMinutes(intMinutes - minsToDeduct);
}

function FormatResourceString() {
    if (arguments.length == 0) {
        return "";
    }

    var resourceString = arguments[0];
    if (resourceString != null) {
        for (var i = 1; i < arguments.length; i++) {
            resourceString = resourceString.replace("{" + (i - 1) + "}", arguments[i]);
        }
    }
    else {
        return "";
    }
    return resourceString;
}

function AddOption(sName, text, value) {
    var select = $get(sName);
    if (select != null) {
        var optn = document.createElement("OPTION");
        optn.text = text;
        optn.value = value;
        select.options.add(optn);
    }
}

function ClearOptions(sName) {
    var select = $get(sName);
    if (select != null) select.options.length=0
}

function Delay(str) {
    setTimeout(str, 10);
}

function GetSelectedRadioButtonValue(listBoxId)
{
    var i = 0;

    for (i = 0; ; i++)
    {
        o = document.getElementById(listBoxId + "_" + i);
        if (o !== null)
        {
            if (o.checked == true)
            {
                return o.value;
            }
        }
        else
        {
            break;
        }
    }
    return null;
}

function RenderButton(id, cssClass, hoverCssClass, horizontalAlignment, onClick, hoverMode, text, uniqueval) {

    var uniqueattr = (uniqueval == null) ? "" : "uniqueattribute='" + uniqueval + "'";
    var buttonHtml = "";
    var idText = "";

    if ((id != null) && (id != "")) {
        idText = "id='" + id + "'";
    }

    if ((hoverCssClass == null) || (hoverCssClass == "")) {
        hoverCssClass = cssClass + "Hover";
    }

    var containerClass = "";
    switch (horizontalAlignment.toLowerCase())
    {
        case "center":
            containerClass = "Center";
            break;
        case "right":
            containerClass = "Right";
            break;
        case "left":
            containerClass = "Left";
            break;
    }

    if (hoverMode.toLowerCase() != "cssclassswap") {
        cssClass += " " + containerClass;
        hoverCssClass += " " + containerClass;
    }
    
    switch (hoverMode.toLowerCase()) {
        case "backgroundimageswap":
            buttonHtml += "<div id='" + id + "' class='" + cssClass + " FloatNone' onclick='" + onClick + "'  onkeypress='HandleKeyPressEvent(event);' onmouseover='ButtonHover(this);'  onfocus='ButtonHover(this);' onmouseout='ButtonOut(this);' onblur='ButtonOut(this);' "+uniqueattr+" >" + text + "</div>";
            break;
        case "divvisibility":
            buttonHtml += "<div id='" + id + "_Normal' class='" + cssClass;
            buttonHtml += "' onclick='" + onClick + "'  onkeypress='HandleKeyPressEvent(event);' onmouseover='ButtonVisibilityHover(\"" + id + "\");'  onfocus='ButtonVisibilityHover(\"" + id + "\");' onmouseout='ButtonVisibilityOut(\"" + id + "\");'  onblur='ButtonVisibilityOut(\"" + id + "\");' "+uniqueattr+">";
            buttonHtml += "<span>";
            buttonHtml += text;
            buttonHtml += "</span>";
            buttonHtml += "</div>";

            buttonHtml += "<div id='" + id + "_Hover' class='" + hoverCssClass;
            buttonHtml += "' onclick='" + onClick + "'  onkeypress='HandleKeyPressEvent(event);' onmouseover='ButtonVisibilityHover(\"" + id + "\");'  onfocus='ButtonVisibilityHover(\"" + id + "\");' onmouseout='ButtonVisibilityOut(\"" + id + "\");'  onblur='ButtonVisibilityOut(\"" + id + "\");' style='display:none; ' >";
            buttonHtml += "<span>";
            buttonHtml += text;
            buttonHtml += "</span>";
            buttonHtml += "</div>";
            break;
        case "cssclassswap":
            if (containerClass != "") {
                buttonHtml += "<div id='" + id + "Div' class='" + containerClass + "' style='display:inline' >";
            }
            else {
                buttonHtml += "<div id='" + id + "Div' style='display:inline' >";
            }

            buttonHtml += "<div class='" + cssClass;
            buttonHtml += "' onclick='" + onClick + "' onkeypress='HandleKeyPressEvent(event);'";
            if (hoverCssClass != cssClass) {
                buttonHtml += " onmouseover='ButtonClassHover(this,\"" + hoverCssClass + "\");'  onfocus='ButtonClassHover(this,\"" + hoverCssClass + "\");' onmouseout='ButtonClassOut(this,\"" + cssClass + "\");' onblur='ButtonClassOut(this,\"" + cssClass + "\");' "+uniqueattr+" ";
            }
            buttonHtml += " >";
            buttonHtml += "<span>";
            buttonHtml += text;
            buttonHtml += "</span>";
            buttonHtml += "</div>";

            if (hoverCssClass != cssClass) {
                buttonHtml += "<div class='" + hoverCssClass + "' style='display:none;'></div>";
            }
            
            buttonHtml += "</div>";

            break;
    }
    return buttonHtml;
}

function ButtonHover(control) {
    var src = GetBackgroundImage(control).replace(/_hover/gi, ""); // remove any existing hover text
    if ((src != "") && (src.length > 4 )) {
        var ext = src.substring(src.length - 5, src.length);
        src = src.substring(0, src.length - 5);    // back out file extension
        control.style.backgroundImage = src + "_hover" + ext;
    }
    //alert(src + "_hover" + ext);
}

function ButtonOut(control) {
    control.style.backgroundImage = GetBackgroundImage(control).replace(/_hover/gi, ""); // remove any existing hover text
}

function ButtonClassHover(event, hoverClass) {
    var e = getEventTarget(event) || event;
    SetClass(e, hoverClass);
}

function ButtonClassOut(event, normalClass) {
    var e = getEventTarget(event) || event;
    SetClass(e, normalClass);
}

function ButtonVisibilityHover(clientId) {

    var normal = $get(clientId + "_Normal");
    var hover = $get(clientId + "_Hover");

    if ((normal != null) && (hover != null)) {
        normal.style.display = "none";
        hover.style.display = "";
    }
}

function ButtonVisibilityOut(clientId) {
    var normal = $get(clientId + "_Normal");
    var hover = $get(clientId + "_Hover");

    if ((normal != null) && (hover != null)) {
        normal.style.display = "";
        hover.style.display = "none";
    }
}

function GetBackgroundImage(control) {
    return GetStyle(control).backgroundImage.replace(/\"/gi, "");
}

function GetStyle(control) {
    if (window.getComputedStyle) {
        try {
            return document.defaultView.getComputedStyle(control, "");
        }
        catch (e) {

        }
    }
    try {
        return control.currentStyle;
    }
    catch (e) {
        return control.style;
    }
}

function SetClass(obj, name) {
    if (obj == null) {
        alert("MISSING OBJECT");
        return;
    }
    
    obj.setAttribute("className", name);
    obj.setAttribute("class", name);
}

function GetClass(obj) {
    //Only DOM elements support getAttribute so shortcut out to minimize exception
    if (obj.nodeType != 1) {
        return "";
    }

    try {
        return obj.className;
    }
    catch (ex) {
        try {
            className = obj.getAttribute("className");
            if ((className != null) && (className != "")) {
                return className
            }
        }
        catch (e) {

        }
        try {
            className = obj.getAttribute("class");
            if ((className != null) && (className != "")) {
                return className
            }
        }
        catch (e) {

        }
        return "";
    }
}

function GetElementsByClassName(node, classname) {
    //Found implementation from http://stackoverflow.com/questions/1933602/how-to-getelementbyclass-instead-of-getelementbyid-with-javascript
    if (node.getElementsByClassName) { // use native implementation if available
        return node.getElementsByClassName(classname);
    } else {
        return (function getElementsByClass(searchClass, node) {
            if (node == null)
                node = document;
            var classElements = [],
            els = node.getElementsByTagName("*"),
            elsLen = els.length,
            pattern = new RegExp("(^|\\s)" + searchClass + "(\\s|$)"), i, j;

            for (i = 0, j = 0; i < elsLen; i++) {
                if (pattern.test(els[i].className)) {
                    classElements[j] = els[i];
                    j++;
                }
            }
            return classElements;
        })(classname, node);
    }
}

function GetElementsByTagNameFromArray(array, tagName) {
    var elements = new Array();
    var element = 0;

    if ((array != null) && (array.length != null)) {
        for (var i = 0; i < array.length; i++) {
            var oItemElements = array[i].getElementsByTagName(tagName);
            for (var j = 0; j < oItemElements.length; j++) {
                elements[element] = oItemElements[j];
                element++;
            }
        }
    }
    return elements;
}

function GetImmediateChildrenByName(obj, name) {
    var children = new Array();
    var child = 0;

    if ((obj != null) && (obj.childNodes != null) && (obj.childNodes.length != null)) {
        for (var i = 0; i < obj.childNodes.length; i++) {
            if ((obj.childNodes[i].name == name) ||
                (obj.childNodes[i].getAttribute("name") == name)) //IE9 removed support for the name property and switched it to an attribute
            {
                children[child] = obj.childNodes[i];
                child++;
            }
        }
    }
    return children;
}

function GetImmediateChildrenByClass(obj, className) {
    var children = new Array();
    var child = 0;
    
    if ((obj != null) && (obj.childNodes != null) && (obj.childNodes.length != null)) {
        for (var i = 0; i < obj.childNodes.length; i++) {
            if (GetClass(obj.childNodes[i]) == className) {
                children[child] = obj.childNodes[i];
                child++;
            }
        }
    }
    return children;
}

function GetImmediateChildByClass(obj, className) {
    if ((obj != null) && (obj.childNodes != null) && (obj.childNodes.length != null)) {
        for (var i = 0; i < obj.childNodes.length; i++) {
            if (GetClass(obj.childNodes[i]) == className) {
                return obj.childNodes[i];
            }
        }
    }
    return null;
}

function GetChildByClass(obj, className) {
    if ((obj != null) && (obj.childNodes != null) && (obj.childNodes.length != null)) {
        for (var i = 0; i < obj.childNodes.length; i++) {
            if (GetClass(obj.childNodes[i]) == className) {
                return obj.childNodes[i];
            }
            var child = GetChildByClass(obj.childNodes[i], className);
            if (child != null) {
                return child;
            }
        }
    }
    return null;
}

function GetChildByTag(obj, tag) {
    if ((obj != null) && (obj.childNodes != null) && (obj.childNodes.length != null)) {
        var tagUpper = tag.toUpperCase();
        for (var i = 0; i < obj.childNodes.length; i++) {
            if ((obj.childNodes[i].tagName != null) &&
                (obj.childNodes[i].tagName.toUpperCase() == tagUpper)) {
                return obj.childNodes[i];
            }
            var child = GetChildByTag(obj.childNodes[i], tagUpper);
            if (child != null) {
                return child;
            }
        }
    }
    return null;
}

function GetImmediateChildByTag(obj, tag) {
    if ((obj != null) && (obj.childNodes != null) && (obj.childNodes.length != null)) {
        var tagUpper = tag.toUpperCase();
        for (var i = 0; i < obj.childNodes.length; i++) {
            if ((obj.childNodes[i].tagName != null) &&
                (obj.childNodes[i].tagName.toUpperCase() == tagUpper)) {
                return obj.childNodes[i];
            }
        }
    }
    return null;
}

function GetImmediateChildById(obj, id) {
    if ((obj != null) && (obj.childNodes != null) && (obj.childNodes.length != null)) {
        for (var i = 0; i < obj.childNodes.length; i++) {
            if (obj.childNodes[i].id == id) {
                return obj.childNodes[i];
            }
        }
    }
    return null;
}

function GetChildById(obj, id) {
    if ((obj != null) && (obj.childNodes != null) && (obj.childNodes.length != null)) {
        for (var i = 0; i < obj.childNodes.length; i++) {
            if (obj.childNodes[i].id == id) {
                return obj.childNodes[i];
            }
            var child = GetChildById(obj.childNodes[i], id);
            if (child != null) {
                return child;
            }
        }
    }
    return null;
}

function GetParentByClass(obj, className) {
    while (obj != null) {
        if (GetClass(obj) == className) {
            break;
        }
        obj = obj.parentNode;
    }
    return obj;
}

function GetParentById(obj, id) {
    if (obj == null) {
        return null;
    }

    if (obj.id.indexOf(id) >= 0) {
        return obj;
    }

    return GetParentById(obj.parentNode, id);
}

function GetParentByExactId(obj, id) {
    if (obj == null) {
        return null;
    }

    if (obj.id == id) {
        return obj;
    }

    return GetParentByExactId(obj.parentNode, id);
}

function GetParentByTag(obj, tag) {
    if (obj == null) {
        return null;
    }

    return (obj.tagName.toUpperCase() == tag.toUpperCase()) ? obj : GetParentByTag(obj.parentNode, tag);
}

function GetChildLink(obj)
{
    if ((obj != null) && (obj.childNodes != null) && (obj.childNodes.length != null)) {
        for (var i = 0; i < obj.childNodes.length; i++) {
            if (obj.childNodes[i].href != null) {
                return obj.childNodes[i];
            }
            var child = GetChildLink(obj.childNodes[i]);
            if (child != null) {
                return child;
            }
        }
    }
}

function DisableHyperLinks(containerId) {
    var containerDiv = $get(containerId);
    if (containerDiv != null) {
        var link = GetChildLink(containerDiv, "");

        if (link != null) {
            link.href = "javascript:DisabledLink()";
        }
    }
}

function DisabledLink() {
}

function PreloadImages() {
    var oPreloadDiv = $get("preload_image_div");

    var imageName = null;
    if (oPreloadDiv != null) {
        var oImgList = oPreloadDiv.getElementsByTagName('input');

        if ((oImgList != null) && (oImgList.length != null)) {
            for (var i = 0; i < oImgList.length; i++) {
                if (oImgList[i].preloaded == null) {
                    imageName = oImgList[i].value;
                    oImgList[i].preloaded = "preloaded";
                    break;                    
                }
            }
        }
    }

    if (imageName != null) {
        var image = new Image();
        image.src = imageName;
        setTimeout("PreloadImages()", 200);
    }
}

function Attach(obj, name, func) {
    if (obj.addEventListener) obj.addEventListener(name, func, false);
    else if (obj.attachEvent) obj.attachEvent("on" + name, func);
    else eval("obj.on" + name + " = func;");
}

function Detach(element, type, handler) {
  if (element.removeEventListener) {
    element.removeEventListener(type, handler, false);
  } else if (element.detachEvent) {
    element.detachEvent("on" + type, handler);
  } else {
    element["on" + type] = null;
  }
}

/* Scrollbar */

var ScrollBar = {
    Create: function (btn, content) {
        if ((btn == null) || (content == null)) {
            return;
        }
        ScrollBar.Display(btn, content, false);
        //Tie up scroll wheel functionality
        content.ScrollButton = btn;
        ScrollBar.HookEvent(content, 'mousewheel', ScrollBar.OnScrollEvent);
        btn.parentNode.ScrollButton = btn;
        ScrollBar.HookEvent(btn.parentNode, 'mousewheel', ScrollBar.OnScrollEvent);
        //Tie up clicking on the bar to page up/page down
        ScrollBar.HookEvent(btn.parentNode, 'click', ScrollBar.OnBarClickEvent);
    },

    Update: function (btn, content) {
        if ((btn == null) || (content == null)) {
            return;
        }
        ScrollBar.Display(btn, content, true);
    },

    Display: function (btn, content, refresh) {
        if ((btn == null) || (content == null)) {
            return;
        }

        // Initialize content div
        // IE6 will not report offsetHeight correctly unless a width is set
        // width can be set in the style sheet, but if it isn't set it here to prevent errors
        // from client stylesheets not setting the width on MenuScrollContent
        try {
            if (content.currentStyle.width.indexOf("px", 0) < 0) {
                content.style.width = content.parentNode.offsetWidth + "px";
            }
        }
        catch (ex) {
        }

        var scrollbarStyle = GetStyle(btn.parentNode);
        var scrollBorderHeight = 0;
        if (scrollbarStyle != null) {
            var border = parseInt(scrollbarStyle.borderTopWidth);
            if (!isNaN(border) && (border != 0)) {
                scrollBorderHeight += border;
            }
            border = parseInt(scrollbarStyle.borderBottomWidth);
            if (!isNaN(border) && (border != 0)) {
                scrollBorderHeight += border;
            }
        }

        oldContentDifference = content.offsetHeight - content.parentNode.offsetHeight;
        btn.ContentHeight = content.offsetHeight;
        btn.ContainerHeight = content.parentNode.offsetHeight;
        newContentDifference = content.offsetHeight - content.parentNode.offsetHeight;
        btn.parentNode.Content = content;
        btn.Content = content;
        if (refresh == false) {
            btn.Content.style.top = "0px";
        }
        btn.parentNode.style.display = "";
        btn.parentNode.style.visibility = "visible";
        //alert(content.clientHeight + ":" + content.offsetTop + ":" + content.offsetHeight + "\n");

        // Skip out if scroll isn't needed
        if (btn.ContainerHeight >= btn.ContentHeight) {
            btn.parentNode.style.visibility = "hidden";
            btn.parentNode.style.display = "none";
            btn.Content.style.top = "0px";
            return;
        }

        var pageButtonHeights = 0;
        var oPageUp = GetChildByClass(btn.parentNode, "ScrollPageUp");
        var oPageDown = GetChildByClass(btn.parentNode, "ScrollPageDown");

        if (oPageUp != null) {
            if ((oPageUp.style.display == "") && (oPageUp.offsetWidth != 0)) {
                btn.parentNode.PageUpHeight = oPageUp.offsetHeight;
                pageButtonHeights += oPageUp.offsetHeight;
                oPageUp.onclick = ScrollBar.OnPrevPage;
                oPageUp.ScrollButton = btn;
            }
            else {
                btn.parentNode.PageUpHeight = 0;
                oPageUp = null;
            }
        }
        if (oPageDown != null) {
            if ((oPageDown.style.display == "") && (oPageDown.offsetWidth != 0)) {
                btn.parentNode.PageDownHeight = oPageDown.offsetHeight;
                pageButtonHeights += oPageDown.offsetHeight;
                oPageDown.onclick = ScrollBar.OnNextPage;
                oPageDown.ScrollButton = btn;
            }
            else {
                btn.parentNode.PageDownHeight = 0;
                oPageDown = null;
            }
        }

        // Scrolling space = height of MenuScrollBar div - MenuScrollButton height
        oldScrollDelta = btn.ScrollDelta;
        btn.ScrollDelta = Math.round(btn.parentNode.offsetHeight - btn.offsetHeight - pageButtonHeights - (scrollBorderHeight * 2));
        btn.MaxY = btn.ScrollDelta;
        btn.StartY = 0;
        if (refresh == false) {
            btn.LastY = 0;
            btn.style.top = "0px";
        } else {
            oldContentTop = parseFloat(btn.Content.style.top.replace(/px/, ""));
            if (-oldContentTop >= newContentDifference) {
                btn.Content.style.top = -newContentDifference + "px";
                btn.LastY = btn.ScrollDelta;
                btn.style.top = btn.ScrollDelta + "px";
            } else {
                newButtonTop = (-oldContentTop * btn.ScrollDelta) / newContentDifference;
                btn.LastY = newButtonTop;
                btn.style.top = newButtonTop + "px";
            }
        }

        if (oPageDown != null) {
            var top = btn.ContainerHeight - pageButtonHeights - btn.offsetHeight - scrollBorderHeight;
            oPageDown.style.top = top + "px";
        }

        // Initialize dragging
        btn.OnDragStart = ScrollBar.OnDragStart;
        btn.OnDrag = ScrollBar.OnDrag;
        btn.OnDragEnd = ScrollBar.OnDragEnd;
        btn.onmousedown = btn.OnDragStart;
    },

    MoveToEnd: function (btn, content) {
        if ((btn == null) || (content == null)) {
            return;
        }

        ScrollBar.Display(btn, content, true);

        if (content.offsetHeight > content.parentNode.offsetHeight) {
            btn.ContentHeight = content.offsetHeight;
            btn.ContainerHeight = content.parentNode.offsetHeight;
            newContentDifference = content.offsetHeight - content.parentNode.offsetHeight;
            btn.Content = content;
            btn.Content.style.top = -newContentDifference + "px";

            btn.MaxY = btn.ScrollDelta;
            btn.StartY = btn.MaxY;
            btn.LastY = btn.MaxY;

            btn.style.top = btn.MaxY + "px";
        }
    },

    GetEvent: function (e) {
        return (typeof e == 'undefined') ? window.event : e;
    },

    OnPrevPage: function (e) {
        e = ScrollBar.GetEvent(e);

        var oPage = getEventTarget(e);
        var o = oPage.ScrollButton;
        var currentOffset = -parseInt(o.Content.style.top);

        currentOffset -= o.ContainerHeight;
        if (currentOffset < 0) {
            currentOffset = 0;
        }

        o.Content.style.top = -currentOffset + "px";

        ScrollBar.Display(o, o.Content, true);

        ScrollBar.CancelScrollEvent(e);

        return false;
    },

    OnNextPage: function (e) {
        e = ScrollBar.GetEvent(e);

        var oPage = getEventTarget(e);
        var o = oPage.ScrollButton;
        var currentOffset = -parseInt(o.Content.style.top);

        currentOffset += o.ContainerHeight;
        if ((currentOffset + o.ContainerHeight) > o.ContentHeight) {
            currentOffset = o.ContentHeight - o.ContainerHeight;
        }

        o.Content.style.top = -currentOffset + "px";

        ScrollBar.Display(o, o.Content, true);

        ScrollBar.CancelScrollEvent(e);

        return false;
    },

    OnDragStart: function (e) {
        e = ScrollBar.GetEvent(e);

        ScrollBar.Current = this;
        this.MouseStartY = parseInt(e.clientY);
        this.StartY = this.LastY;
        this.MouseMaxY = this.MouseStartY + this.ScrollDelta - this.StartY;
        this.MouseMinY = this.MouseStartY - this.StartY;
        document.onmousemove = this.OnDrag;
        document.onmouseup = this.OnDragEnd;
        ScrollBar.OldSelect = document.onselectstart;
        document.onselectstart = function () { return false; }

        return false;
    },

    OnDrag: function (e) {
        e = ScrollBar.GetEvent(e);
        var o = ScrollBar.Current;
        var y = parseInt(e.clientY);

        // Make sure mouse is on the button
        if (y > o.MouseMaxY) y = o.MouseMaxY;
        if (y < o.MouseMinY) y = o.MouseMinY;

        // Calculate change in y
        y = y - o.MouseStartY;

        //alert(o.StartY + y);

        // Update scroll button
        o.LastY = (o.StartY + y);
        o.style.top = o.LastY + "px";

        // Update content
        y = -1 * (o.StartY + y) * (o.Content.offsetHeight - o.Content.parentNode.offsetHeight) / o.ScrollDelta;
        o.Content.style.top = y + "px";
    },

    OnDragEnd: function () {
        document.onmousemove = null;
        document.onmouseup = null;
        document.onselectstart = ScrollBar.OldSelect;
    },


    HookEvent: function (element, eventName, callback) {
        if (typeof (element) == "string")
            element = document.getElementById(element);
        if (element == null)
            return;
        if (element.addEventListener) {
            if (eventName == 'mousewheel')
                element.addEventListener('DOMMouseScroll', callback, false);
            element.addEventListener(eventName, callback, false);
        }
        else if (element.attachEvent)
            element.attachEvent("on" + eventName, callback);
    },

    CancelScrollEvent: function (e) {
        e = ScrollBar.GetEvent(e);
        if (e.stopPropagation)
            e.stopPropagation();
        if (e.preventDefault)
            e.preventDefault();
        e.cancelBubble = true;
        e.cancel = true;
        e.returnValue = false;
        return false;
    },

    OnScrollEvent: function (e) {
        e = ScrollBar.GetEvent(e);
        var oContent = e.currentTarget;
        //IE does not support the current target attribute so we need to iterate through 
        //parents to try to find it
        if (oContent == null) {
            oContent = ScrollBar.GetIECurrentTarget(e.srcElement);
        }
        if (oContent == null) {
            ScrollBar.CancelScrollEvent(e);
            return;
        }
        var o = oContent.ScrollButton;
        if ((o.ContainerHeight == 0) ||
            (o.ContainerHeight >= o.ContentHeight)) {
            ScrollBar.CancelScrollEvent(e);
            return;
        }

        var currentOffset = -parseInt(o.Content.style.top);

        var normal = e.detail ? e.detail * -1 : e.wheelDelta / 40;
        currentOffset -= 10 * normal;
        if ((currentOffset + o.ContainerHeight) > o.ContentHeight) {
            currentOffset = o.ContentHeight - o.ContainerHeight;
        }
        else if (currentOffset < 0) {
            currentOffset = 0;
        }
        o.Content.style.top = -currentOffset + "px";

        ScrollBar.Display(o, o.Content, true);

        ScrollBar.CancelScrollEvent(e);
    },

    GetIECurrentTarget: function (element) {
        while (element != null) {
            if (element.ScrollButton != null) {
                return element;
            }
            element = element.parentNode;
        }

        return null;
    },

    OnBarClickEvent: function (e) {
        e = ScrollBar.GetEvent(e);
        var oContent = e.currentTarget;
        //IE does not support the current target attribute so we need to iterate through 
        //parents to try to find it
        if (oContent == null) {
            oContent = ScrollBar.GetIECurrentTarget(e.srcElement);
        }
        if (oContent == null) {
            return;
        }
        var o = oContent.ScrollButton;

        //The event offset will be based on the box that is clicked, so if the button was clicked on
        //return so that we don't process the offset inside the button and interpret it as
        //going back to the top
        if ((e.srcElement != null) && (e.srcElement.id == o.id)) {
            return;
        }
        var currentOffset = -parseInt(o.Content.style.top);

        var buttonTop = o.offsetTop - o.clientTop;
        var eventY = e.offsetY;
        //Firefox doesn't support offsetY
        if (eventY == null) {
            eventY = e.layerY;
        }

        if (eventY < oContent.PageUpHeight) {
            return;
        }
        else if (eventY > (oContent.offsetHeight - oContent.PageDownHeight)) {
            return;
        }

        if (eventY < buttonTop) {
            currentOffset -= o.ContentHeight;
        }
        else if (eventY > (buttonTop + o.clientHeight)) {
            currentOffset += o.ContentHeight;
        }

        if ((currentOffset + o.ContainerHeight) > o.ContentHeight) {
            currentOffset = o.ContentHeight - o.ContainerHeight;
        }
        else if (currentOffset < 0) {
            currentOffset = 0;
        }
        o.Content.style.top = -currentOffset + "px";

        ScrollBar.Display(o, o.Content, true);

        ScrollBar.CancelScrollEvent(e);
    }

}

var VerticalPageBox = {
    Create: function (btn, content) {
        if ((btn == null) || (content == null)) {
            return;
        }
        VerticalPageBox.Display(btn, content, false);
    },

    Update: function (btn, content) {
        if ((btn == null) || (content == null)) {
            return;
        }
        VerticalPageBox.Display(btn, content, true);
    },

    Display: function (btn, content, refresh) {
        if ((btn == null) || (content == null)) {
            return;
        }

        // Initialize content div
        // IE6 will not report offsetHeight correctly unless a width is set
        // width can be set in the style sheet, but if it isn't set it here to prevent errors
        // from client stylesheets not setting the width on MenuScrollContent
        try {
            if (content.currentStyle.width.indexOf("px", 0) < 0) {
                content.style.width = content.parentNode.offsetWidth + "px";
            }
        }
        catch (ex) {
        }
        oldContentDifference = content.offsetHeight - content.parentNode.offsetHeight;
        btn.ContentHeight = content.offsetHeight;
        btn.ContainerHeight = content.parentNode.offsetHeight;
        newContentDifference = content.offsetHeight - content.parentNode.offsetHeight;
        btn.Content = content;
        if (refresh == false) {
            btn.Content.style.top = "0px";
        }
        btn.parentNode.style.display = "block";
        btn.parentNode.style.visibility = "visible";
        //alert(content.clientHeight + ":" + content.offsetTop + ":" + content.offsetHeight + "\n");

        // Skip out if scroll isn't needed
        if (btn.ContainerHeight >= btn.ContentHeight) {
            btn.parentNode.style.visibility = "hidden";
            btn.parentNode.style.display = "none";
            btn.Content.style.top = "0px";
            return;
        }

        // Initialize dragging
        btn.OnClick = VerticalPageBox.OnNextPage;
    },

    GetEvent: function (e) {
        return (typeof e == 'undefined') ? window.event : e;
    },

    OnNextPage: function (e) {
        e = VerticalPageBox.GetEvent(e);

        var o = getEventTarget(e);
        var currentOffset = -parseInt(o.Content.style.top);

        currentOffset += o.ContainerHeight;
        if (currentOffset > o.Content.offsetHeight) {
            currentOffset = 0;
        }

        o.Content.style.top = -currentOffset + "px";

        return false;
    }

}

var Unselectable = {

    enable: function (e) {
        var e = e ? e : window.event;

        if (e.button != 1) {
            if (e.target) {
                var target = e.target;
            } else if (e.srcElement) {
                var target = e.srcElement;
            }

            if (target.tagName != null) {
                var targetTag = target.tagName.toLowerCase();
                if ((targetTag != "input") && (targetTag != "textarea") && (targetTag != "select")) {
                    return false;
                }
            }
        }
    },

    disable: function () {
        return true;
    }

}

////////////////////////////////////////
// Modifier Utility methods
////////////////////////////////////////

function GetNestedModifiersForInput(input) {
    var oIds = input.id.split('_');
    return GetNestedModifiersForGroup(input, oIds[2]);
}

function GetNestedModifiersForGroup(input, nodeId) {
    var nestedModifiers = $get("_NestedMod_" + nodeId);
    return nestedModifiers;
}

////////////////////////////////////////
// Store Locator / Geocoding Methods
////////////////////////////////////////
var StoreLocatorAddressCookieName = "StoreLocatorAddress";
var StoreLocatorAddress2CookieName = "StoreLocatorAddress2";
var StoreLocatorCityCookieName = "StoreLocatorCity";
var StoreLocatorStateCookieName = "StoreLocatorState";
var StoreLocatorPostalCookieName = "StoreLocatorPostal";

function GeocodeAddressFromControl(addressControlClientID, callback) 
{
    GeocodeAddressFromInputs(
        document.getElementById(addressControlClientID + "_AddressText"),
        document.getElementById(addressControlClientID + "_Address2Text"),
        document.getElementById(addressControlClientID + "_CityText"),
        document.getElementById(addressControlClientID + "_StateCombo"),
        document.getElementById(addressControlClientID + "_ZipCodeText"),callback);
}

function GeocodeAddressFromInputs(txtAddressControl, txtAddress2Control, txtCityControl,
    ddlStateControl, txtPostalControl,callback) 
{
    var address = BuildLocatorAddressCookieFromInputs(txtAddressControl, txtAddress2Control, txtCityControl,
        ddlStateControl, txtPostalControl, callback);
    var geocoder = new google.maps.Geocoder();
    geocoder.geocode({ 'address': address }, callback);
}


function BuildLocatorAddressCookieFromControl(addressControlClientID) 
{
    BuildLocatorAddressCookieFromInputs(
        document.getElementById(addressControlClientID + "_AddressText"),
        document.getElementById(addressControlClientID + "_Address2Text"),
        document.getElementById(addressControlClientID + "_CityText"),
        document.getElementById(addressControlClientID + "_StateCombo"),
        document.getElementById(addressControlClientID + "_ZipCodeText"));
}

function BuildLocatorAddressCookieFromInputs(txtAddressControl, txtAddress2Control, txtCityControl,
    ddlStateControl, txtPostalControl)
{
    var address = "";

    address = BuildAddress(address, txtAddressControl, StoreLocatorAddressCookieName);
    if (txtAddress2Control != null) {
        address = BuildAddress(address, txtAddress2Control, StoreLocatorAddress2CookieName);
    }
    address = BuildAddress(address, txtCityControl, StoreLocatorCityCookieName);
    
    if (ddlStateControl != null) 
    {
        var selIndex = ddlStateControl.selectedIndex;
        var state = "";
        if (selIndex > 0) 
        {
            if (address != "") 
            {
                address += ", ";
            }
            state = "" + $(ddlStateControl.options[selIndex]).attr('title');
            address += state;
        }
        setSessionCookie(StoreLocatorStateCookieName, ddlStateControl.options[selIndex].value);
    }

    address = BuildAddress(address, txtPostalControl, StoreLocatorPostalCookieName);
    return address;
}

function BuildAddress(address, inputCtrl, cookieName) 
{
    if (inputCtrl != null) 
    {
        setSessionCookie(cookieName, inputCtrl.value);
        if (inputCtrl.value != "") 
        {
            if (address != "") 
            {
                address += ", ";
            }
            address += inputCtrl.value;
        }
    }

    return address;
}

////////////////////////////////////////
// Validation Tooltip Methods
////////////////////////////////////////

//Based on code found at http://forums.asp.net/t/1286673.aspx/1
function TooltipValidators(validatorErrorCssClass) {
    //Creating the global validation error css class variable
    document.validatorErrorCssClass = validatorErrorCssClass || "ValidationError";

    //Creating a function to validate the control
    ValidateControl = function (control, validationGroup) {
        control.isvalid = true;
        control.errormessages = [];
        for (var num1 = 0; num1 < control.Validators.length; num1++) {
            var val1 = control.Validators[num1];
            ValidatorValidate(val1, validationGroup, null);
            if (!val1.isvalid) {
                control.isvalid = false;
                control.errormessages.push(val1.errormessage);
            }
        }
        return control.isvalid;
    }

    //Checking if ValidatorUpdateDisplay exists
    if (typeof (ValidatorUpdateDisplay) != "undefined") {

        //Copy ValidatorUpdateDisplay to BaseValidatorUpdateDisplay
        BaseValidatorUpdateDisplay = ValidatorUpdateDisplay;

        //Replacing ValidatorUpdateDisplay
        ValidatorUpdateDisplay = function (val) {
            //Invoking original ValidatorUpdateDisplay function saved in BaseValidatorUpdateDisplay
            BaseValidatorUpdateDisplay(val);

            //Getting the control to validate
            var el = document.getElementById(val.controltovalidate);
            if (el != null) {
                //Getting the css class for the error
                var cssClass = val.ValidationErrorCssClass || val.getAttribute("validationErrorCssClass") || validatorErrorCssClass;

                //Checking if it has already the css class
                var hasErrorClass = el.className.indexOf(cssClass) != -1;
                //Checking if all validators are valid
                var array1 = [];
                var isValid = true;
                if (el.Validators != null) {
                    for (var num1 = 0; num1 < el.Validators.length; num1++) {
                        var val1 = el.Validators[num1];
                        if (!val1.isvalid) {
                            isValid = false;
                            array1.push(val1.errormessage);
                        }
                    }
                }
                el.isvalid = isValid;
                el.errormessages = array1;

                //If it is a checkbox or radio button using the parent element
                if (el.type == "checkbox" || el.type == "radio") el = el.parentNode;

                //if it is valid and it has the css class remove it
                if (hasErrorClass && isValid) {
                    //Removing the css class
                    el.className = el.className.replace(new RegExp("\\b" + cssClass + "\\b", "i"), "").replace(/^\s+|\s(?=\s+)|\s+$/m, "");
                    var tooltip = document.getElementById("ErrorTooltip" + el.id);
                    el.parentNode.removeChild(tooltip);
                }
                //if it is not valid and it has not the css class add it
                else if (!hasErrorClass && !isValid) {
                    //Adding the css class
                    el.className += (el.className.length != 0 ? " " : "") + cssClass;
                    var tooltipPosition = document.createElement('div');
                    tooltipPosition.setAttribute('id', "ErrorTooltip" + el.id);
                    if (el == document.activeElement) {
                        tooltipPosition.className = "ErrorTooltipContainer"
                    }
                    else {
                        tooltipPosition.className = "ErrorTooltipContainer hidden";
                    }
                    tooltipPosition.style.left = getAbsPos(el.id, "left") / 2 + "px";
                    if (el.id != "" && (document.getElementById(el.id).offsetHeight > 50)) {
                        tooltipPosition.style.bottom = "31px";
                    }
                    else {
                        tooltipPosition.style.bottom = (-5 + 2 * getAbsPos(el.id, "top")) + "px";
                    }
                    var tooltip = document.createElement('div');
                    tooltip.setAttribute('id', "ErrorTooltipInner" + el.id);
                    tooltip.className = "ErrorToolTipContent";
                    tooltip.innerHTML = el.errormessages[0];
                    tooltipPosition.appendChild(tooltip);
                    var tooltipArrow = document.createElement('div');
                    tooltipArrow.setAttribute('id', "ErrorToolTipArrow" + el.id);
                    tooltipArrow.className = "ErrorToolTipArrow";
                    var arrowHtml = "";
                    for (var i = 10; i > 0; i--) {
                        arrowHtml += "<div class='line" + i + "'> <!-- --></div>"
                    }
                    tooltipArrow.innerHTML = arrowHtml;
                    tooltipPosition.appendChild(tooltipArrow);

                    el.parentNode.insertBefore(tooltipPosition, el);
                    el.onfocus = ShowErrorMessages;
                    el.onblur = HideErrorMessages;


                }
            }
        }
    }
}

function getAbsPos(oId, tl) {
    var o = (typeof oId == typeof "") ? document.getElementById(oId) : oId;
    var val = parseInt((tl == 'top') ? o.offsetHeight : o.offsetWidth);
    return val;
}
function ShowErrorMessages() {
    var tooltip = document.getElementById("ErrorTooltip" + this.id);
    if (tooltip != null) {
        tooltip.className = "ErrorTooltipContainer";
    }
}
function HideErrorMessages() {
    var tooltip = document.getElementById("ErrorTooltip" + this.id);
    if (tooltip != null) {
        tooltip.className += (tooltip.className.length != 0 ? " " : "") + "hidden";
    }
}

function SpawnErrormessage(errorMessage, el, trigger) {
    if (trigger == null) {
        trigger = el;
    }
    if (el != null) {
        var existingErrorToolTip = document.getElementById("ErrorTooltip" + el.id);
        if (existingErrorToolTip != null) {
            existingErrorToolTip.getElementsByClassName("ErrorToolTipContent").innerText = errorMessage;
            return;
        }
        var tooltipPosition = document.createElement('div');
        tooltipPosition.setAttribute('id', "ErrorTooltip" + el.id);

        tooltipPosition.className = "ErrorTooltipContainer";

        tooltipPosition.style.left = getAbsPos(el.id, "left") / 2 + "px";
        if (el.id != "" && (document.getElementById(el.id).offsetHeight > 50)) {
            tooltipPosition.style.bottom = "31px";
        }
        else {
            tooltipPosition.style.bottom = (-5 + 2 * getAbsPos(el.id, "top")) + "px";
        }
        var tooltip = document.createElement('div');
        tooltip.setAttribute('id', "ErrorTooltipInner" + el.id);
        tooltip.className = "ErrorToolTipContent";
        tooltip.innerHTML = errorMessage;
        tooltipPosition.appendChild(tooltip);
        var tooltipArrow = document.createElement('div');
        tooltipArrow.setAttribute('id', "ErrorToolTipArrow" + el.id);
        tooltipArrow.className = "ErrorToolTipArrow";
        var arrowHtml = "";
        for (var i = 10; i > 0; i--) {
            arrowHtml += "<div class='line" + i + "'></div>";
        }
        tooltipArrow.innerHTML = arrowHtml;
        tooltipPosition.appendChild(tooltipArrow);

        el.parentNode.insertBefore(tooltipPosition, el);

        trigger.onfocus = function () {
            tooltipPosition.parentNode.removeChild(tooltipPosition);
            trigger.onfocus = null;
        };
    }
}


//////////////////////Tab Ordering/////////////////////////////////
function SetFocus(className, currElementClassName) {
    var elements;
    // if tabindex is defined and currElementClassName != null, then multiple items with same class name so iterate in order for focus
    if ((currElementClassName != null) && (typeof tabidx !== 'undefined')) {
        elements = GetElementsByClassName(document, currElementClassName);
        if (elements.length > 0) {
            if (tabidx != 0 && null != elements[tabidx + 1]) {
                tabidx = tabidx + 1;
            }

            $(elements[tabidx]).focus();
            if (tabidx < elements.length) {
                tabidx = tabidx + 1;
                return false;
            }
            else {
                tabidx = 0;
                return SetFocusOnElement(className);
            }
        }
    }
    else//set focus on next item
    {
        return SetFocusOnElement(className);
    }
}

//Handles the key press event, determines if its a tab event or enter key pressed.
function HandleKeyPressEvent(e) {
    var el = e.srcElement ? e.srcElement : e.target;
    var keycode = null;
    if (window.event) { keycode = window.event.keyCode; }
    else if (e) { keycode = e.which; }
    if (keycode == 13) {//enter key pressed
        if (el.onclick) el.onclick();
        else if (el.click) el.click();
        return false;
    }
    return false;
}

var DateTimeFormatter = function (cpattern, cDatePattern) {
    var me = this;
    me.pattern = cpattern;
    me.datePattern = cDatePattern;

    me.getTimeFormat = function() {
        var jpattern = me.pattern
            .replace(/h/g, 'g')         //replace 12 H format to g
            .replace(/H/g, 'h')         //replace 24 H format to h
            .replace(/m/g, 'i')         //replace m format as i for minutes
            .replace(/tt/g, 'a');       //replace tt with a as ante meridiem/post meridiem
        return jpattern;
    };

    me.getDateFormat = function () {
        var jpattern = me.datePattern
            .replace(/(^|[^d])ddd([^d]|$)/g, '$1D$2')
            .replace(/(^|[^M])MMM([^M]|$)/g, '$1M$2')
            .replace(/MM/g, 'm')
            .replace(/yy/g, 'y');                
        return jpattern;
    };
 
    me.formatDisplayTime = function (time) {
        var dtSplit = time.split('-');
        var formattedTimes = jQuery.map(dtSplit, function (timeString) {
            var cdate = (new Date()).toDateString();
            var dt = new Date(cdate + ' ' + timeString);
            return $.formatDateTime(me.getTimeFormat(), dt);
        });
        return formattedTimes.join(" - ");
    };
    me.dateFormat = function (date) {
        return $.formatDateTime(me.getDateFormat(), date);
    };

}

var CreditCard = function(cardtype)
{
    var me = this;
    me.cardtype = cardtype;

    me.validateCVV = function (cvv) {               
        return (me.validateIsNumericCVV(cvv) && me.validateCVVNotZero(cvv) && me.validateCVVCardLength(cvv));
    }
    me.validateCVVNotZero = function (cvv)
    {
        return (cvv != "000" && cvv != "0000");
    }
    me.validateIsNumericCVV = function (cvv) {
        return isNumeric(cvv)
    }
    me.validateCVVCardLength  = function(cvv)
    {
        if(cardtype.indexOf(CustomerPaymentMethodTypeEnum.Amex.toString()) != -1)
        {
            return (cvv.length == 4);                
        }
        else
        {
            return (cvv.length == 3);
        }              
    }
    isNumeric = function (number)
    {
        return !isNaN(Number(number));
    }
};

var CreditCardValidator = function(binRegEx) {
    var me = this;
    var re = binRegEx;

    me.GetCardType = function (number) {
        if (re.visa.test(number)) {
            return "7"; //Visa
        } else if (re.mastercard.test(number)) {
            return "6"; //MasterCard
        } else if (re.amex.test(number)) {
            return "0"; //AMEX
        } else if (re.diners.test(number)) {
            return "2"; //Diners
        } else if (re.discover.test(number)) {
            return "3"; //Discover
        } else if (re.jcb.test(number)) {
            return "5"; //JCB
        } else if (re.maestro.test(number)) {
            return "21"; //Maestro
        }
        return "";
    }
}

var CustomerPaymentMethodTypeEnum =
{
    /// <summary>
    /// Amex
    /// </summary>
    Amex: "Amex",             // American Express

    /// <summary>
    /// Credit
    /// </summary>        
    Credit: "Credit",           // Unspecified Card Type – Not Supported

    /// <summary>
    /// Diners
    /// </summary>    
    Diners: "Diners",           // Diners Club

    /// <summary>
    /// Discover
    /// </summary>    
    Discover: "Discover",         // Discover Card

    /// <summary>
    /// GiftCard
    /// </summary>   
    GiftCard: "GiftCard",         // Non-Credit Gift Cards

    /// <summary>
    /// JCB
    /// </summary>    
    JCB: "JCB",              // JCB

    /// <summary>
    /// MasterCard
    /// </summary>    
    MasterCard: "MasterCard",       // Master Card

    /// <summary>
    /// Visa
    /// </summary>    
    Visa: "Visa",             // Visa

    /// <summary>
    /// Prepaid
    /// </summary>    
    PrePaid: "PrePaid",           // Prepaid

    /// <summary>
    /// Prepaid_Amex
    /// </summary>    
    Prepaid_Amex: "Prepaid_Amex",

    /// <summary>
    /// Prepaid_Discover
    /// </summary>    
    Prepaid_Discover: "Prepaid_Discover",

    /// <summary>
    /// Prepaid_MasterCard
    /// </summary>    
    Prepaid_MasterCard: "Prepaid_MasterCard",

    /// <summary>
    /// Prepaid_Visa
    /// </summary>    
    Prepaid_Visa: "Prepaid_Visa",

    /// <summary>
    /// Prepaid_GlobalBlue
    /// </summary>    
    PrePaid_GlobalBlue: "PrePaid_GlobalBlue",

    /// <summary>
    /// Prepaid_Worldpay
    /// </summary>    
    Prepaid_Worldpay: "Prepaid_Worldpay",

    /// <summary>
    /// Prepaid_PayPal
    /// </summary>    
    PrePaid_PayPal: "PrePaid_PayPal",

    /// <summary>
    /// Prepaid_GiftCard
    /// </summary>    
    Prepaid_GiftCard: "Prepaid_GiftCard",

    /// <summary>
    /// Paytronix_GiftCard
    /// </summary>
    PrePaid_Paytronix: "PrePaid_Paytronix",

    /// <summary>
    /// Deposit
    /// </summary>
    Deposit: "Deposit",

    /// <summary>
    /// First data value link gift card
    /// </summary>

    PrePaid_FirstDataValueLink: "PrePaid_FirstDataValueLink",

    /// <summary>
    /// Maestro
    /// </summary>

    Maestro : "Maestro"
};