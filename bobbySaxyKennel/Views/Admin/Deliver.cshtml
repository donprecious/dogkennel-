@model IEnumerable<bobbySaxyKennel.Models.Order>

@{
    ViewBag.Title = "Orders";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<h2>Deliver Item</h2>
<h4>Pending Delivery</h4>
<table class="table">
    <tr>
        <th>
            Order No:
        </th>

        <th>
            @Html.DisplayNameFor(model => model.Customer.User.Email)
        </th>
        <th>
            Name
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Pet.Name)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Topping.Name)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Quantity)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.TotalPrice)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.SIze)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.DeliveryAddress)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.AddtionalPhoneNo)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Status)
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @item.Id
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Customer.User.Email)
                <br />
                Date Ordered: @item.DateTime
            </td>
            <td>
                @item.Customer.User.FirstName @item.Customer.User.LastName
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Pet.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Topping.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Quantity)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.TotalPrice)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.SIze)
            </td>

            <td>
                @Html.DisplayFor(modelItem => item.DeliveryAddress)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.AddtionalPhoneNo)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Status)
            </td>
            <td>
                <a href="@Url.Action("SetOrderStatus", new {id = item.Id, status = "APPROVED"})">Delivered</a> |
                <a href="@Url.Action("SetOrderStatus", new {id = item.Id, status = "DENY"})">DENY</a>

            </td>
        </tr>
    }

</table>

<div class="well">
    <div class="form-group">
        <label class="control-label">Filter by Ordering Time</label>
        <input type="datetime" id="orderTime" class="form-control" />
        <button class="btn btn-primary"> Filter</button>
    </div>

    <div id="map" style="width: 100%; height: 800px;">

    </div>
</div>

@section Scripts{

    <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDTWW86SJ-y6HFw1-cYJTCvTBI9bW1x_uY&libraries=places"></script>

    <script>
     @{
         var cer = Model.FirstOrDefault(a => a.Logitude != null && a.Latitude != null);

     } 

    //map initiallization
        function initMap() { 
            var cord = { lat: 0, lng: -180 }
                      @if (cer != null)
                    {
                       @:cord = { lat : @cer.Latitude, lng: @cer.Logitude}
                    }
        var map = new google.maps.Map(document.getElementById('map'),
             {
                 zoom: 5,
                 center: cord,
                 mapTypeId: 'hybrid'
                });

            // cordinates
            var flightPlanCoordinates = [

                @foreach (var i in Model )
        {
            if (i.Logitude != null && i.Latitude != null)
            {
                   @:{ lat: @i.Latitude, lng: @i.Logitude },
            }

        } 
              cord
            ];
            var flightPath = new google.maps.Polyline({
                path: flightPlanCoordinates,
                geodesic: true,
                strokeColor: '#FF0000',
                strokeOpacity: 1.0,
                strokeWeight: 2
            });

            flightPath.setMap(map);
            setMarkers(map);
        }
        @{ var count = 0;}
        var beaches = [ 
            @foreach (var i in Model )
            {
                count++;
            if (i.Logitude != null && i.Latitude != null)
            {
                   @: ['@i.Customer.User.Email', @i.Latitude, @i.Logitude, @count],
            }

        }
        ]; 

        function setMarkers(map) {
            // Adds markers to the map.

            // Marker sizes are expressed as a Size of X,Y where the origin of the image
            // (0,0) is located in the top left of the image.

            // Origins, anchor positions and coordinates of the marker increase in the X
            // direction to the right and in the Y direction down.
            var image = {
                url: 'https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png',
                // This marker is 20 pixels wide by 32 pixels high.
                size: new google.maps.Size(30, 34),
                // The origin for this image is (0, 0).
                origin: new google.maps.Point(0, 0),
                // The anchor for this image is the base of the flagpole at (0, 32).
                anchor: new google.maps.Point(0, 32)
            };
            // Shapes define the clickable region of the icon. The type defines an HTML
            // <area> element 'poly' which traces out a polygon as a series of X,Y points.
            // The final coordinate closes the poly by connecting to the first coordinate.
            var shape = {
                coords: [1, 1, 1, 20, 18, 20, 18, 1],
                type: 'poly'
            };
            for (var i = 0; i < beaches.length; i++) {
                var beach = beaches[i];
                var marker = new google.maps.Marker({
                    position: {lat: beach[1], lng: beach[2]},
                    map: map,
                    icon: image,
                    label: beach[0],
                    shape: shape,
                    title: beach[0],
                    zIndex: beach[3]
                });
            }
        }
        initMap();
    </script>


}
